#include "canopentestdlg.h"
#include <qmessagebox.h>
#include <qfile.h>
#include <qtextstream.h>

CanOpenTestDlg::CanOpenTestDlg(QDialog *parent)
    : QDialog(parent)
{
    ui.setupUi(this);
    m_canOpen  = new CanOpenProtocol;
    timer = new QTimer;
	m_countRevMSG = 0;
    init();
}

CanOpenTestDlg::~CanOpenTestDlg()
{
  
}

void CanOpenTestDlg::init()
{
    int cardNums = CAN_CountCards();
    CAN_BOARD_INFO boardInfo;
    
    ui.lineEditCardCount->setText(QString::number(cardNums));
    if(CAN_ReadBoardInfo(m_cardIndex, &boardInfo) == CAN_OK)
    {
        ui.lineEditCardName->setText(QString::fromLocal8Bit(boardInfo.cName)); 
        ui.lineEditNodeID->setText("11");
    }
    else
        ui.lineEditCardName->setText("NULL");
    on_showCardStatus();
   
    QVector<unsigned int> chCounts = m_canOpen->ChannelCounts();
	ui.lineEditDI->setText(QString::number(chCounts[0]));
    ui.lineEditDO->setText(QString::number(chCounts[1]));
    ui.lineEditAI->setText(QString::number(chCounts[2]));
    ui.lineEditAO->setText(QString::number(chCounts[3]));

   	ui.runPushButton->setEnabled(true);
	ui.stopPushButton->setEnabled(false);  
    
    connect(ui.runPushButton,SIGNAL(clicked()),this,SLOT(on_runPushbutton()));
	connect(ui.stopPushButton,SIGNAL(clicked()),this,SLOT(on_stopPushButton()));
	connect(ui.transmitPushButton,SIGNAL(clicked()),this,SLOT(on_transmitData()));
	connect(ui.clearPushButton,SIGNAL(clicked()),this,SLOT(on_clearMsg()));
    connect(m_canOpen,SIGNAL(readReady()),this,SLOT(on_recieveData()));
    connect(timer,SIGNAL(timeout()),this,SLOT(on_showCardStatus()));
	timer->start(100);
}

/*public slots*/

void CanOpenTestDlg::on_runPushbutton()
{
    m_canOpen->run(1000,true);
    if(CAN_IsRun(m_cardIndex, m_canNode))
        ui.textEdit->append("start CANOpen.");
    else
	{
        ui.textEdit->append("Warning: open CANOpen failed.");
	}
	ui.runPushButton->setEnabled(!CAN_IsRun(m_cardIndex,m_canNode));
	ui.stopPushButton->setEnabled(CAN_IsRun(m_cardIndex, m_canNode));
#ifndef TEST
#define TEST 1
    m_canOpen->enabledTest(false);
#endif
}

void CanOpenTestDlg::on_stopPushButton()
{
    ui.textEdit->append("stop CANOpen.");
   
    m_canOpen->stop();
	ui.runPushButton->setEnabled(!CAN_IsRun(m_cardIndex,m_canNode));
	ui.stopPushButton->setEnabled(CAN_IsRun(m_cardIndex, m_canNode));

}

void CanOpenTestDlg::on_clearMsg()
{
	ui.textEdit->clear();
	ui.labelMsgRev->setText("0");
	m_countRevMSG = 0;
}

void CanOpenTestDlg::on_transmitData()
{ 
    if(ui.lineEditID->text().isEmpty())
    {
        QMessageBox::warning(this,QStringLiteral("警告"),QStringLiteral("COB-ID不能为空！"));
        return;
    }

    bool ok;
    UINT32 COB_id = ui.lineEditID->text().toULong(&ok,16);
    QString data = ui.lineEditData->text();
    //QMessageBox::about(0,"msg",QString::number(COB_id&(~0x3F),16).toUpper() +" "+data); 

    m_canOpen->sendMsg(COB_id, data);
}

void CanOpenTestDlg::on_recieveData()
{
	QFile file("telegram.txt");
    bool fileerr = true;;
    if(!file.open(QFile::WriteOnly | QFile::Append | QFile::Text))
        fileerr = false;
    QTextStream out(&file);

    QStringList list = m_canOpen->readAll();
    for(int i=0; i<list.size(); i++)
    {
		out << list[i] << "\n";
        ui.textEdit->append(list[i]);	
        ui.labelMsgRev->setText(QString::number(++m_countRevMSG));
    }
}

void CanOpenTestDlg::on_showCardStatus()
{
    CAN_STS canStatus;
	if(CAN_ReadCanStatus(0,0,&canStatus) == CAN_OK)
    {
        ui.lineEditBus->setText(canStatus.bus_status?"OFF":"ON");
        ui.lineEditError->setText(canStatus.error_status?"ERR":"OK");
        ui.lineEditTX->setText(canStatus.tx_status?"Transmit":"Idle");
        ui.lineEditRX->setText(canStatus.rx_status?"Receive":"Idle");
        ui.lineEditTXCom->setText(canStatus.tx_complete_status?"Complete":"InComplete");
        ui.lineEditTXBuffer->setText(canStatus.tx_buffer_status?"Release":"Locked");
        ui.lineEditRXBuffer->setText(canStatus.rx_buffer_status?"FULL":"Empty");
        ui.lineEditOverRun->setText(canStatus.data_overrun_status?"OverRun":"Absent");
    }
    else
    {
        ui.lineEditBus->setText("OFF");
        ui.lineEditError->setText("OFF");
        ui.lineEditTX->setText("OFF");
        ui.lineEditRX->setText("OFF");
        ui.lineEditTXCom->setText("OFF");
        ui.lineEditTXBuffer->setText("OFF");
        ui.lineEditRXBuffer->setText("OFF");
        ui.lineEditOverRun->setText("OFF");
    }
}

void CanOpenTestDlg::closeEvent(QCloseEvent *)
{
	on_stopPushButton();
}

